BINARY_SCALE = 1024
DECIMAL_SCALE = 10000

FRAME_PER_SECOND = 16

LEVEL = 130
LEVEL_SCALE = 1155
LEVEL_CONSTANT = 130350
LEVEL_REDUCTION = 0.05

DOT_DAMAGE_SCALE = 12
PHYSICAL_DAMAGE_SCALE = 10
MAGICAL_DAMAGE_SCALE = 12

CRITICAL_STRIKE_SCALE = 9.985 * (LEVEL_SCALE * LEVEL - LEVEL_CONSTANT)
CRITICAL_POWER_SCALE = 3.679 * (LEVEL_SCALE * LEVEL - LEVEL_CONSTANT)
OVERCOME_SCALE = 11.412 * (LEVEL_SCALE * LEVEL - LEVEL_CONSTANT)
HASTE_SCALE = 10.610 * (LEVEL_SCALE * LEVEL - LEVEL_CONSTANT)
STRAIN_SCALE = 6.734 * (LEVEL_SCALE * LEVEL - LEVEL_CONSTANT)
DEFAULT_SURPLUS_COF = 7.421

SHIELD_SCALE = 6.364

SHIELD_BASE_MAP = {
    134: 83679,
    133: 79721,
    132: 46901,
    131: 33338
}
SHIELD_CONSTANT_MAP = {
    level: SHIELD_SCALE * (LEVEL_SCALE * level - LEVEL_CONSTANT) for level in SHIELD_BASE_MAP
}
LEVEL_REDUCTION_MAP = {
    level: LEVEL_REDUCTION * (level - LEVEL) for level in SHIELD_BASE_MAP
}

MAJOR_BASE = 44
BASE_CRITICAL_POWER = 1.75

AGILITY_TO_CRITICAL_STRIKE = 0.9
STRENGTH_TO_ATTACK_POWER = 0.163
STRENGTH_TO_OVERCOME = 0.3
SPIRIT_TO_CRITICAL_STRIKE = 0.9
SPUNK_TO_ATTACK_POWER = 0.181
SPUNK_TO_OVERCOME = 0.3

PVX_TO_SURPLUS = 0.5
PVX_TO_STRAIN = 1.5

DELTA_SCALE = 1
MAJOR_DELTA = 268 * DELTA_SCALE
PHYSICAL_DELTA = 568 * DELTA_SCALE
MAGICAL_DELTA = 633 * DELTA_SCALE
MINOR_DELTA = 2089 * DELTA_SCALE
WEAPON_DELTA = 856 * DELTA_SCALE
PVX_DELTA = MINOR_DELTA / 2


def PHYSICAL_ATTACK_POWER_COF(cof):
    return int(cof) / FRAME_PER_SECOND / PHYSICAL_DAMAGE_SCALE


def PHYSICAL_DOT_ATTACK_POWER_COF(cof, interval, tick):
    cof = int(cof) * max(FRAME_PER_SECOND, interval * tick / DOT_DAMAGE_SCALE)
    return cof / FRAME_PER_SECOND / tick / FRAME_PER_SECOND / PHYSICAL_DAMAGE_SCALE


def MAGICAL_ATTACK_POWER_COF(cof):
    return int(cof) / FRAME_PER_SECOND / MAGICAL_DAMAGE_SCALE


def MAGICAL_DOT_ATTACK_POWER_COF(cof, interval, tick):
    cof = int(cof) * max(FRAME_PER_SECOND, interval * tick / DOT_DAMAGE_SCALE)
    return cof / FRAME_PER_SECOND / tick / FRAME_PER_SECOND / MAGICAL_DAMAGE_SCALE


def SURPLUS_COF(cof):
    return int(cof) / BINARY_SCALE


def WEAPON_DAMAGE_COF(cof):
    return int(cof) / BINARY_SCALE


def GLOBAL_DAMAGE_COF(cof):
    return (int(cof) / BINARY_SCALE + BINARY_SCALE) / BINARY_SCALE
